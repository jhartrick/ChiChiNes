import { ChiChiCPPU } from '../ChiChiMachine';
import { ChiChiPPU } from '../ChiChiPPU';
export declare enum NameTableMirroring {
    OneScreen = 0,
    Vertical = 1,
    Horizontal = 2,
    FourScreen = 3,
}
export interface IBaseCart {
    mapperName: string;
    supported: boolean;
    submapperId: number;
    ROMHashFunction: string;
    mapsBelow6000: boolean;
    irqRaised: boolean;
    nextEventAt: number;
    handleNextEvent(clock: number): void;
    advanceClock(clock: number): void;
    Whizzler: ChiChiPPU;
    CPU: ChiChiCPPU;
    LoadiNESCart(header: number[], prgRoms: number, chrRoms: number, prgRomData: Uint8Array, chrRomData: Uint8Array, chrRomOffset: number): void;
    InitializeCart(): void;
    ResetBankStartCache(): void;
    UpdateScanlineCounter(): void;
    GetByte(clock: number, address: number): number;
    SetByte(clock: number, address: number, data: number): void;
    GetPPUByte(clock: number, address: number): number;
    SetPPUByte(clock: number, address: number, data: number): void;
}
export declare class BaseCart implements IBaseCart {
    handleNextEvent(clock: number): void;
    advanceClock(clock: number): void;
    fourScreen: boolean;
    mapperName: string;
    supported: boolean;
    submapperId: number;
    mapsBelow6000: boolean;
    static arrayCopy(src: any, spos: number, dest: any, dpos: number, len: number): void;
    nextEventAt: number;
    prgRomBank6: Uint8Array;
    ppuBankStarts: Uint32Array;
    bankStartCache: Uint32Array;
    iNesHeader: Uint8Array;
    romControlBytes: Uint8Array;
    nesCart: Uint8Array;
    chrRom: Uint8Array;
    current8: number;
    currentA: number;
    currentC: number;
    currentE: number;
    SRAMCanWrite: boolean;
    SRAMEnabled: boolean;
    private SRAMCanSave;
    prgRomCount: number;
    chrRomOffset: number;
    chrRamStart: number;
    chrRomCount: number;
    mapperId: number;
    bank8start: number;
    bankAstart: number;
    bankCstart: number;
    bankEstart: number;
    ROMHashFunction: string;
    checkSum: any;
    private mirroring;
    updateIRQ: () => void;
    bankSwitchesChanged: boolean;
    oneScreenOffset: number;
    readonly NumberOfPrgRoms: number;
    readonly NumberOfChrRoms: number;
    readonly MapperID: number;
    readonly MapperName: string;
    irqRaised: boolean;
    Debugging: boolean;
    DebugEvents: any;
    Whizzler: ChiChiPPU;
    CheckSum: string;
    CPU: ChiChiCPPU;
    SRAM: any;
    CartName: string;
    NMIHandler: () => void;
    CurrentBank: number;
    UsesSRAM: boolean;
    constructor();
    ClearDebugEvents(): void;
    LoadiNESCart(header: number[], prgRoms: number, chrRoms: number, prgRomData: Uint8Array, chrRomData: Uint8Array, chrRomOffset: number): void;
    GetByte(clock: number, address: number): number;
    SetByte(clock: number, address: number, data: number): void;
    GetPPUByte(clock: number, address: number): number;
    SetPPUByte(clock: number, address: number, data: number): void;
    SetupBankStarts(reg8: number, regA: number, regC: number, regE: number): void;
    MaskBankAddress(bank: number): number;
    WriteState(state: any): void;
    ReadState(state: any): void;
    HandleEvent(Clock: number): void;
    ResetClock(Clock: number): void;
    ResetBankStartCache(): void;
    UpdateBankStartCache(): number;
    ActualChrRomOffset(address: number): number;
    Mirror(clockNum: number, mirroring: number): void;
    CopyBanks(clock: number, dest: number, src: number, numberOf8kBanks: number): void;
    CopyBanks4k(clock: number, dest: number, src: number, numberOf4kBanks: number): void;
    CopyBanks2k(clock: number, dest: number, src: number, numberOf2kBanks: number): void;
    CopyBanks1k(clock: number, dest: number, src: number, numberOf1kBanks: number): void;
    InitializeCart(): void;
    UpdateScanlineCounter(): void;
}
export declare class BaseCart4k implements IBaseCart {
    handleNextEvent(clock: number): void;
    advanceClock(clock: number): void;
    mapperName: string;
    supported: boolean;
    submapperId: number;
    mapsBelow6000: boolean;
    nextEventAt: number;
    prgRomBank6: Uint8Array;
    ppuBankStarts: Uint32Array;
    bankStartCache: Uint32Array;
    private iNesHeader;
    private romControlBytes;
    nesCart: Uint8Array;
    chrRom: Uint8Array;
    current8: number;
    current9: number;
    currentA: number;
    currentB: number;
    currentC: number;
    currentD: number;
    currentE: number;
    currentF: number;
    SRAMCanWrite: boolean;
    SRAMEnabled: boolean;
    private SRAMCanSave;
    prgRomCount: number;
    chrRomOffset: number;
    chrRamStart: number;
    chrRomCount: number;
    mapperId: number;
    bank8start: number;
    bank9start: number;
    bankAstart: number;
    bankBstart: number;
    bankCstart: number;
    bankDstart: number;
    bankEstart: number;
    bankFstart: number;
    ROMHashFunction: string;
    checkSum: any;
    private mirroring;
    updateIRQ: () => void;
    bankSwitchesChanged: boolean;
    oneScreenOffset: number;
    readonly NumberOfPrgRoms: number;
    readonly NumberOfChrRoms: number;
    readonly MapperID: number;
    readonly MapperName: string;
    irqRaised: boolean;
    Debugging: boolean;
    DebugEvents: any;
    Whizzler: ChiChiPPU;
    CheckSum: string;
    CPU: ChiChiCPPU;
    SRAM: any;
    CartName: string;
    NMIHandler: () => void;
    CurrentBank: number;
    UsesSRAM: boolean;
    constructor();
    ClearDebugEvents(): void;
    LoadiNESCart(header: number[], prgRoms: number, chrRoms: number, prgRomData: Uint8Array, chrRomData: Uint8Array, chrRomOffset: number): void;
    GetByte(clock: number, address: number): number;
    SetByte(clock: number, address: number, data: number): void;
    GetPPUByte(clock: number, address: number): number;
    SetPPUByte(clock: number, address: number, data: number): void;
    SetupBankStarts(reg8: number, reg9: number, regA: number, regB: number, regC: number, regD: number, regE: number, regF: number): void;
    maskBankAddress(bank: number): number;
    WriteState(state: any): void;
    ReadState(state: any): void;
    HandleEvent(Clock: number): void;
    ResetClock(Clock: number): void;
    ResetBankStartCache(): void;
    UpdateBankStartCache(): number;
    ActualChrRomOffset(address: number): number;
    Mirror(clockNum: number, mirroring: number): void;
    CopyBanks(clock: number, dest: number, src: number, numberOf8kBanks: number): void;
    CopyBanks4k(clock: number, dest: number, src: number, numberOf4kBanks: number): void;
    CopyBanks2k(clock: number, dest: number, src: number, numberOf2kBanks: number): void;
    CopyBanks1k(clock: number, dest: number, src: number, numberOf1kBanks: number): void;
    InitializeCart(): void;
    UpdateScanlineCounter(): void;
}
export declare class UnsupportedCart extends BaseCart {
    supported: boolean;
    InitializeCart(): void;
}
