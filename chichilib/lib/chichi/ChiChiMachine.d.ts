import { BaseCart } from './ChiChiCarts';
import { WavSharer, ChiChiBopper } from './ChiChiAudio';
import { ChiChiCPPU_AddressingModes, ChiChiInstruction, RunningStatuses, CpuStatus } from './ChiChiTypes';
import { ChiChiInputHandler, ChiChiControlPad } from './ChiChiControl';
import { ChiChiPPU } from "./ChiChiPPU";
export declare class ChiChiMachine {
    private frameJustEnded;
    private frameOn;
    private totalCPUClocks;
    constructor(cpu?: ChiChiCPPU);
    Drawscreen(): void;
    RunState: RunningStatuses;
    ppu: ChiChiPPU;
    Cpu: ChiChiCPPU;
    readonly Cart: BaseCart;
    SoundBopper: ChiChiBopper;
    WaveForms: WavSharer;
    private _enableSound;
    EnableSound: boolean;
    FrameCount: number;
    IsRunning: boolean;
    readonly PadOne: ChiChiControlPad;
    readonly PadTwo: ChiChiControlPad;
    SRAMReader: (RomID: string) => any;
    SRAMWriter: (RomID: string, SRAM: any) => void;
    Reset(): void;
    PowerOn(): void;
    PowerOff(): void;
    Step(): void;
    RunFrame(): void;
    EjectCart(): void;
    LoadNSF(rom: any): void;
    LoadCart(rom: any): void;
    HasState(index: number): boolean;
    GetState(index: number): void;
    SetState(index: number): void;
    SetupSound(): void;
    FrameFinished(): void;
    dispose(): void;
}
export declare class ChiChiCPPU {
    readonly SRMasks_CarryMask: number;
    readonly SRMasks_ZeroResultMask: number;
    readonly SRMasks_InterruptDisableMask: number;
    readonly SRMasks_DecimalModeMask: number;
    readonly SRMasks_BreakCommandMask: number;
    readonly SRMasks_ExpansionMask: number;
    readonly SRMasks_OverflowMask: number;
    readonly SRMasks_NegativeResultMask: number;
    frameFinished: () => void;
    private static cpuTiming;
    private static addressModes;
    private _reset;
    private clock;
    private _ticks;
    _statusRegister: number;
    _programCounter: number;
    _handleNMI: boolean;
    _handleIRQ: boolean;
    _addressBus: number;
    _dataBus: number;
    _operationCounter: number;
    _accumulator: number;
    _indexRegisterX: number;
    _indexRegisterY: number;
    _currentInstruction_AddressingMode: ChiChiCPPU_AddressingModes;
    _currentInstruction_Address: number;
    _currentInstruction_OpCode: number;
    _currentInstruction_Parameters0: number;
    _currentInstruction_Parameters1: number;
    _currentInstruction_ExtraTiming: number;
    systemClock: number;
    nextEvent: number;
    private _cheating;
    private __frameFinished;
    private _ramsBuffer;
    Rams: Uint8Array;
    private _stackPointer;
    private instructionUsage;
    private _debugging;
    Debugging: boolean;
    instructionHistoryPointer: number;
    _instructionHistory: ChiChiInstruction[];
    readonly InstructionHistory: Array<any>;
    readonly InstructionHistoryPointer: number;
    backgroundPatternTableIndex: number;
    private _PPUAddress;
    private _PPUStatus;
    _PPUControlByte0: number;
    _PPUControlByte1: number;
    private _spriteAddress;
    private currentXPosition;
    private currentYPosition;
    private _hScroll;
    private _vScroll;
    private lockedHScroll;
    private lockedVScroll;
    private shouldRender;
    private _frames;
    private hitSprite;
    private PPUAddressLatchIsHigh;
    private p32;
    private isRendering;
    frameClock: number;
    FrameEnded: boolean;
    private frameOn;
    private nameTableBits;
    private vidRamIsRam;
    _palette: Uint8Array;
    private _openBus;
    private sprite0scanline;
    private sprite0x;
    private _maxSpritesPerScanline;
    private xNTXor;
    private yNTXor;
    private spriteRAMBuffer;
    spriteRAM: Uint8Array;
    private spritesOnLine;
    private currentTileIndex;
    private fetchTile;
    private patternEntry;
    private patternEntryByte2;
    private outBuffer;
    private _padOne;
    private _padTwo;
    ppu: ChiChiPPU;
    byteOutBuffer: Uint8Array;
    constructor(bopper: ChiChiBopper, ppu: ChiChiPPU);
    PadOne: ChiChiInputHandler;
    PadTwo: ChiChiInputHandler;
    private debugEvents;
    addDebugEvent(value: (sender: any, e: any) => void): void;
    removeDebugEvent(value: (sender: any, e: any) => void): void;
    CurrentInstruction: ChiChiInstruction;
    SoundBopper: ChiChiBopper;
    Cart: BaseCart;
    FrameOn: boolean;
    CurrentFrame: number[];
    Clock: number;
    SetFlag(Flag: number, value: boolean): void;
    GetFlag(flag: number): boolean;
    InterruptRequest(): void;
    NonMaskableInterrupt(): void;
    CheckEvent(): void;
    RunFast(): void;
    Step(): void;
    ResetCPU(): void;
    PowerOn(): void;
    GetState(outStream: any): void;
    SetState(inStream: any): void;
    RunFrame(): void;
    DecodeAddress(): number;
    HandleBadOperation(): void;
    DecodeOperand(): number;
    Execute(): void;
    SetZNFlags(data: number): void;
    Compare(data: number): void;
    Branch(): void;
    NMIHandler(): void;
    IRQUpdater(): void;
    LoadBytes(offset: number, bytes: number[]): void;
    LoadBytes$1(offset: number, bytes: number[], length: number): void;
    private PushStack(data);
    private PopStack();
    GetByte(address: number): number;
    PeekByte(address: number): number;
    PeekBytes(start: number, finish: number): number[];
    SetByte(address: number, data: number): void;
    FindNextEvent(): void;
    HandleNextEvent(): void;
    ResetInstructionHistory(): void;
    WriteInstructionHistoryAndUsage(): void;
    FireDebugEvent(s: string): void;
    PeekInstruction(address: number): ChiChiInstruction;
    GetStatus(): CpuStatus;
}
