import { ChiChiSprite, PpuStatus } from './ChiChiTypes';
import { ChiChiCPPU } from './ChiChiCPU';
import { MemoryMap } from './MemoryMaps/ChiChiMemoryMap';
import { StateBuffer } from './StateBuffer';
export declare class ChiChiPPU {
    static pal: Uint32Array;
    LastcpuClock: number;
    NMIHandler: () => void;
    frameFinished: () => void;
    cpu: ChiChiCPPU;
    greyScale: boolean;
    constructor();
    memoryMap: MemoryMap;
    yPosition: number;
    xPosition: number;
    vbufLocation: number;
    currentAttributeByte: number;
    spriteSize: number;
    spritesOnThisScanline: number;
    currentSprites: ChiChiSprite[];
    _spriteCopyHasHappened: boolean;
    spriteZeroHit: boolean;
    unpackedSprites: ChiChiSprite[];
    emphasisBits: number;
    isForegroundPixel: boolean;
    spriteChanges: boolean;
    ppuReadBuffer: number;
    clipSprites: boolean;
    clipTiles: boolean;
    tilesVisible: boolean;
    spritesVisible: boolean;
    nameTableMemoryStart: number;
    backgroundPatternTableIndex: number;
    address: number;
    status: number;
    controlByte0: number;
    controlByte1: number;
    spriteAddress: number;
    currentXPosition: number;
    currentYPosition: number;
    hScroll: number;
    vScroll: number;
    lockedHScroll: number;
    lockedVScroll: number;
    shouldRender: boolean;
    framesRun: number;
    hitSprite: boolean;
    addressLatchIsHigh: boolean;
    isRendering: boolean;
    frameClock: number;
    oddFrame: boolean;
    frameOn: boolean;
    nameTableBits: number;
    palette: Uint8Array;
    openBus: number;
    xNTXor: number;
    yNTXor: number;
    spriteRAMBuffer: ArrayBuffer;
    spriteRAM: Uint8Array;
    spritesOnLine: number[];
    currentTileIndex: number;
    fetchTile: boolean;
    patternEntry: number;
    patternEntryByte2: number;
    byteOutBuffer: Uint8Array;
    GetPPUStatus(): PpuStatus;
    readonly PatternTableIndex: number;
    readonly SpritePatternTableIndex: number;
    initialize(): void;
    setupVINT(): void;
    setByte(Clock: number, address: number, data: number): void;
    getByte(Clock: number, address: number): number;
    copySprites(copyFrom: number): void;
    initSprites(): void;
    getSpritePixel(): number;
    decodeSpritePixel(patternTableIndex: number, x: number, y: number, sprite: {
        v: ChiChiSprite;
    }, tileIndex: number): number;
    preloadSprites(scanline: number): void;
    unpackSprites(): void;
    unpackSprite(currSprite: number): void;
    getNameTablePixel(): number;
    getAttrEntry(ppuNameTableMemoryStart: number, i: number, j: number): number;
    advanceClock(ticks: number): void;
    private renderPixel(clock);
    UpdatePixelInfo(): void;
    setupStateBuffer(sb: StateBuffer): StateBuffer;
    attachStateBuffer(sb: StateBuffer): void;
    updateStateBuffer(sb: StateBuffer): void;
}
